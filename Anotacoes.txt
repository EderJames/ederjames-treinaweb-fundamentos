Conceito do git:
O Git é um sistema para controle de versão de arquivos, muito utilizado por desenvolvedores,
para controlar as modificações de seus projetos e arquivos.
Com o Git, podemos criar todo o histórico de alterações dos arquivos de código-fonte de projetos e, assim,
facilitar o gerenciamentos de nossos projetos.

Conceito de repositório:
Repositório: 
Diretório que vai comportar os nossos arquivos.

Repositório local:
É um repositório onde os códigos são armazenados e versionados localmente, sem a necessidade de um serviço externo.

Repositório remoto:
É um repositório onde os códigos são armazenados e versionados remotamente, utilizando serviços como GitHub, Bitbucket ou GitLab.

//Criando um repositório. 
Comando: git init
Este comando faz com que o nosso diretório passe a comportar um repositório git.
Após utilizarmos o comando git init, o git criará um diretório oculto chamado .git, este diretório conterá todos os arquivos de configuração do git.
Quando criamos um repositório com o git init, também estamos automaticamente criando a branch master.

*Verificando o status da branch/repositório que estamos utilizando:
comando: git status
Este comando mostrará as seguintes informações:
-O nome da branch em que estamos.
-Os commits.
-Os arquivos não marcados, não rastreados, com o git add.
-Os arquivos marcados com o git add (adicionados).

**Para que um arquivo seja gerenciado pelo git, precisamos adiciona-lo nele, após adicionarmos o arquivo, o git
passará a gerencia-lo. Esta gerência consiste em controlar as alterações, os commits, o histórico, rastreamento e entre outros.
git add

**Estados de um arquivo no git
-Modificado: O arquivo possui o estado de modificado, quando há alguma alteração no arquivo. Estas alterações podem ser tanto de conteúdo, quanto de inserção ou exclusão do arquivo.
-Preparado: O possui possui o estado de preparado quando ele é adicionado ao versionamento, utilizando o comando git add.
-Consolidado: O arquivo possui o estado de consolidado, quando ele foi commitado, sendo portanto, consolidado.

**Conceito de commit
Podemos classificar o commit como uma forma de salvar as alterações que fizemos no nosso arquivo.
Quando executamos o commit, o git solicita que escrevamos um comentário/descrição daquela alteração, esse comentário servirá de descrição sobre o commit.
A criação de commits permite que tenhamos um histórico de alterações de um determinado arquivo.

**Configurando o usuário do git:
git config --global user.name "SEU NOME"

**Configurando o e-mail do git:
git config --global user.email "SEU EMAIL"

*Realizando o commit
git commit -m "comentário do commit"

Entendendo o comando:
git -> acionamos o git
commit -> fazemos o processo relacionado ao envio das alterações para o git
-m -> permite a inserção de uma mensagem

Após fazermos o commit, o git entende que o arquivo está registrado e está sob a gerência do git.
Portanto, caso venhamos a fazer uma alteração neste arquivo, e na sequência utilizarmos o comando git status, veremos que receberemos uma mensagem,
apontando que o arquivo alterado, neste caso o index.html, sofreu alterações e deve ser salvo novamente, através do git add + git commit.
Ou deve ter suas alterações descartadas, através do comando git restore.

**Histórico de alterações de arquivos:
-> Permite voltar commits já realizados.
-> Permite consultar as alterações de um arquivo

**Consultando o histórico de commits
git log

**Saindo do histórico de commits:
..q

**Desfazendo um commit do histórico
Comando: git revert códigoDoCommit
Fará com que um commit seja desfeito, anulando as alterações de um commit. 
Os outros commits, anteriores e posteriores ao commit que será anulado, continuam intactos.
Cria um novo commit, anulando as alterações do commit passado por código, através do git revert e na sequência, envia este novo commit.

Caso venhamos a chamar o comando git revert, em um commit errado, podemos utilizar os seguintes comandos, para cancelar o revert:
git revert --abort -> Aborta o revert
git revert --skip  -> Pula esse patch

Podemos reverter um commit, gerado por um outro revert, fazendo a reversão de uma reversão.

**Ligando um repositório git local, com um repositório git na nuvem
Utilizamos o comando git remote add origin endereçoRepositório
Setando a variável origin:
Exemplo: git remote add origin https://EderJames@bitbucket.org/EderJames/angular-introducao.git

-> Após fazermos a ligação entre o repositório local e o repositório remoto, precisamos verificar se ela está funcionando, através do seguinte comando:
Para bitbucket: ssh -T git@bitbucket.org
Para git: git@github.com

-> Este comando fará com que todo o código local passe a ter uma ligação com o repositório remoto.
-> É importante observar que o processo de ligação entre o repositório local e o repositório remoto, não faz com que o repositório remoto receba os código do repositório local,
para que o repositório remoto receba esses dados, precisamo envia-los através do comando push, seguindo o próximo item, abaixo.

**Enviando o código local para o GitHub/BitBucket/GitLab
git push -u origin master
git push -u origin nome-branch-remota

**Buscando o código do GitHub/BitBucket/GitLab
Este comando fará com que o git puxe os dados do repositório remoto e adicione eles ao nosso projeto.
git pull origin master
git pull origin nome-branch-remota

*Conceito de branch, no git:
O conceito de branch pode se entendido como uma ramificação do código do repositório principal.
Uma branch no git é um ponteiro para as alterações feitas nos arquivos do projeto.
Ela é muito útil quando queremos adicionar um novo recurso ou corrigir um erro, gerando uma nova ramificação sem alterar a ramificação estável, garantindo a integridade do código que já estava funcionando.

Para criarmos uma branch, podemos utilizar o comando git ou a interface de usuário, do repositório remoto que estamos utilizando.
-> Criando por interface, no bitbucket:
Vamos até a página branch, presente no nosso repositório e clicamos no botão "Create branch".

-> Criando por terminal, através da linha de comando:
--Observação: para utilizarmos este comando, devemos estar no repositório/branch que queremos clonar.
git branch nome-branch

Observação sobre a criação de branch via terminal:
Após criarmos a branch através do terminal, devemos lembrar de utilizar o comando git push -u origin nova-branch.
Este comando fará com que a criação da branch seja enviada para o repositório.

Alterando a branch que estamos utilizando:
git switch nome-branch

**Listando as branches disponíveis
Para listarmos as nossas branches locais, utilizamos o comando git branch.
Para listarmos as nossas branches remotas, utilizamos o comando git branch -r 

**Conceito de pull-request:
O pull request é uma solicitação de união de dois códigos, entretanto, esta solicitação criará um local de discussão sobre a alteração que será adicionada ao branch principal.
Este local é representado como uma interface web, ela permite que a alteração seja discutida e alterada em uma página, semelhante a um fórum, onde os membros do projeto podem participar e colaborar.
Após a análise do pull request, podemos fazer o processo de merge, fazendo com que as alterações do pull request sejam mescladas com o código do projeto, no branch principal.

**Entendendo o comando checkout:
O checkout serve para alternar entre versões de código já existentes no sistema local, ou seja, alternar entre as branches locais.
O comando checkout, opera em três entidades distintas: arquivos, commits e branches.
Exemplo:
Suponhamos que temos três branches no nosso repositório local, para listas elas, utilizamos o comando git branch.
-> git branch
-> branches listadas:
funcionalidade-cadastro-pessoa
funcionalidade-cadastro-veiculo
funcionalidade-cadastro-dependente

Nesta situação, vamos utilizar o comando git checkout nome-branch, para navegar entre as branches do git branch.
Selecionando por exemplo, a branch funcionalidade-cadastro-pessoa.
Comando:
-> git checkout funcionalidade-cadastro-pessoa

Outra observação sobre o comando git checkout: Podemos utilizar o comando checkout com o atributo -b.
Este atributo funciona como um atalho, ele diz para o git, que o comando git branch deve ser executado antes do git checkout, ele é utilizado para mudarmos para uma branch e automaticamente já criarmos ela.
Exemplo:
Ainda não temos branch funcionalidade-cadastro-plano-saude.
Utilizamos o comando git checkout -b funcionalidade-cadastro-plano-saude, para criarmos este branch e logo na sequência, mudarmos para ele.

Criando uma branch através de outra branch, com o comando checkout:
-> git checkout -b <new-branch> <existing-branch>
Caso não seja passado o existing-branch, ele pegará o head.

**Buscando o conteúdo de um branch remoto
->Entendendo o git fetch e o git pull
Quando trabalhamos em equipe, sempre devemos estar atentos para a atualização do código do nosso repositório local com o nosso repositório remoto.
Para executarmos essa atualização, podemos utilizar dois comandos do git: git fetch e git pull.

-> git fetch:
Este comando fará o download dos arquivos, documentos, pastas e commits da branch remota, porém, ele não executará o merge destes arquivos na nossa branch, portanto não teremos o risco de comprometer o nosso trabalho,
visto que as alterações não serão mescladas ao nosso repositório local.
Para entendermos o mecanismo do fetch, precisamos compreender a forma como o git armazena os repositório locais e os repositórios remotos.
Repositórios locais: Os códigos dos repositórios locais são armazenados no seguinte caminho: .git/refs/heads.
Repositórios remotos: Os códigos dos repositórios remotos são armazenados no seguinte caminho: .git/refs/remotes.

Quando utilizamos o git fetch, estamos baixando as atualizações do repositório remoto, para os repositórios remotos da nossa máquina, entretanto, não estamos fazendo o merge destas atualizações, com o nosso repositório local.

Formas de utilizar o git fetch:
=> git fetch : Baixará todos os novos arquivos, documentos e commits de todas as branches de um repositório. 

=> git fetch <remote> <branch> : Baixará todos os novos arquivos, documentos e commits de uma branch específica, do repositório. 

=> git fetch all : Baixará todos os arquivos, documentos e commits de todos os repositórios e suas branches.

-> git pull:
O comando git pull é mais direto, ele baixará os arquivos, documentos, pastas e commits do repositório remoto, e logo na sequência ele executará o merge dessas atualizações, com o nosso branch local.

Formas de utilizar o git pull:

**Executando um merge, através das linhas de comando do terminal
Antes de executarmos o merge, devemos utilizar o comando fetch, para atualizar a branch que receberá as alterações de merge.
Neste cenário, vamos supor que temos a branch pagina-contato e temos a branch master. A branch pagina-contato, é uma derivação da branch master.
Após concluirmos a funcionalidade da branch pagina-contato, devemos acessar a branch master através do terminal e na sequência, utilizamos o seguinte comando:
git fetch origin master

Este comando fará com que a branch master remota, seja atualizada.
Após isso, podemos executar o comando de merge.
Para executarmos o merge, devemos utilizar o seguinte comando:
-> git merge + o nome da branch que enviará os commits, exemplo:
-> git merge nome-branch

Após executarmos o merge, teremos duas situações:
1 - Merge feito com sucesso e um commit do merge

2- Conflito nos arquivos e necessidade de correção manual.
Nesta situação de conflito, devemos alterar manualmente os arquivos conflitantes e na sequência utilizar o git add nome-arquivo-conflitante e logo depois o git commit.
Após esse procedimento, utilizamos o comando git push -u origin master, e então enviamos os commits da branch, para o nosso repositório remoto.

Referência para o merge -> https://www.atlassian.com/br/git/tutorials/using-branches/git-merge
